/* 1.What does this code log to the console? 
Does executing the foo function affect the output? Why or why not?

let bar = 1;
function foo() {
  let bar = 2;
}

foo();
console.log(bar);

It will log 1 to the console. This is because bars value only changes
in the foo function where its returned, not logged, on a block scope.
*/

/*In the exercises for the previous chapter, 
you wrote a dynamic greeter program named greeter.js. 
Add a function to this program that solicits the user's first 
and last names in separate invocations; 
the function should return the appropriate name as a string. 
Use the return values to greet the user with their full name.


function getName(prompt) {
let rlSync = require('readline-sync');
let name = rlSync.question(prompt);
return name;
}

let firstName = getName("What's your  first name?\n");
let lastName = getName("What's your  last name?\n");
console.log(`Hello, ${firstName} ${lastName}!`);
*/

//3.Write a program that uses a multiply 
//function to multiply two numbers and returns the result.
// Ask the user to enter the two numbers, 
//then output the numbers and result as a simple equation.

/*
function multiply(num1, num2) {
  return num1 * num2;
}


function getNum(prompt){
  let rlSync = require('readline-sync');
  return parseFloat(rlSync.question(prompt));
}
let num1 = getNum('Please enter the first number: ');
let num2 = getNum('Please enter the second number: ');
console.log(`${num1} * ${num2} = ${multiply(num1, num2)}`)
*/

//4. What does the following code log to the console?

function scream(words) {
  words = words + '!!!!';
  return;
  console.log(words);
}

scream('Yipeee');

//nothing, the return call ends the functions before it can finish.

//5. What does the following code log to the console?

function scream(words) {
  return words + '!!!!';
}

scream('Yipeee');

//noting, it only returns, there is no call to log anything to the console

/*6. In the code shown below, identify the following items:

the function arguments => (2, 3, 4)

the function body => 
  let result = num1 * num2 * num3;
  return result;

the function declaration => everything lines 1-4

the function invocation => let product = numtiplyNumbers(2, 3, 4);

the function name => multiplyNumbers

the function parameters => (num1, num2, num3)

the function return value => result

the names of all variables in this program => 
product, result, multiplyNumbers, num1, num2, num3 are all variables



function multiplyNumbers(num1, num2, num3) {
  let result = num1 * num2 * num3;
  return result;
}

let product = multiplyNumbers(2, 3, 4);

*/

/*7. Without running the following code, what do you think it will output?
function foo(bar, qux) {
  console.log(bar);
  console.log(qux);
}

foo('Hello');
//Hello undefined
*/

/*8. Without running the following code, what do you think it will output?

function foo(bar, qux) {
  console.log(bar);
  console.log(qux);
}

foo(42, 3.1415, 2.718);
//42
//3.1415
*/

/*9. Identify all of the variables named on each line of the following
code. You may assume that question is the name of a built-in function
in JavaScript 
(it is not, so this code won't work as written).

function multiply(left, right) {
  let product = left * right;
  return product;
}

function getNumber(prompt) {
  return parseFloat(question(prompt));
}

let left = getNumber('Enter the first number: ');
let right = getNumber('Enter the second number: ');
console.log(`${left} * ${right} = ${multiply(left, right)}`);

multiply, left, right,
product, left, right
product
getNumber, prompt, 
question, parseFloat, prompt
left, getNumber
right, getNumber
console, left, right, multiply




*/

/* 10.Using the code from Exercise 9, classify each variable name as 
either global or local. For our purposes here, 
you may assume that the code from Exercise 9 is the entire program.

Global: multiply, getNumber, console, parseFloat, question, left, right
Local: left, right, product, prompt





*/


/* 11. Using the code from Exercise 9, are the left and right variables
 on lines 1 and 2 the same as 
the left and right variables on lines 10-12? Explain your reasoning.

No, the ones on Line 10-12 are newly declared and in a different (gobal) scope

*/
